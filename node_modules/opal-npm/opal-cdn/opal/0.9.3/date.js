/* Generated by Opal 0.9.3 */
Opal.modules["date"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$<=>', '$nonzero?', '$d', '$zero?', '$new', '$class', '$-@', '$+@', '$===', '$coerce', '$==', '$>', '$+', '$allocate', '$wrap', '$clone', '$raise', '$>>', '$wday', '$-', '$to_s', '$alias_method']);
  return (function($base, $super) {
    function $Date(){};
    var self = $Date = $klass($base, $super, 'Date', $Date);

    var def = self.$$proto, $scope = self.$$scope;

    def.date = nil;
    (function($base, $super) {
      function $Infinity(){};
      var self = $Infinity = $klass($base, $super, 'Infinity', $Infinity);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      def.d = nil;
      self.$include($scope.get('Comparable'));

      Opal.defn(self, '$initialize', function(d) {
        var self = this;

        if (d == null) {
          d = 1
        }
        return self.d = d['$<=>'](0);
      });

      Opal.defn(self, '$d', function() {
        var self = this;

        return self.d;
      });

      Opal.defn(self, '$zero?', function() {
        var self = this;

        return false;
      });

      Opal.defn(self, '$finite?', function() {
        var self = this;

        return false;
      });

      Opal.defn(self, '$infinite?', function() {
        var self = this;

        return self.$d()['$nonzero?']();
      });

      Opal.defn(self, '$nan?', function() {
        var self = this;

        return self.$d()['$zero?']();
      });

      Opal.defn(self, '$abs', function() {
        var self = this;

        return self.$class().$new();
      });

      Opal.defn(self, '$-@', function() {
        var self = this;

        return self.$class().$new(self.$d()['$-@']());
      });

      Opal.defn(self, '$+@', function() {
        var self = this;

        return self.$class().$new(self.$d()['$+@']());
      });

      Opal.defn(self, '$<=>', function(other) {
        var $a, $b, self = this, $case = nil, l = nil, r = nil;

        $case = other;if ($scope.get('Infinity')['$===']($case)) {return self.$d()['$<=>'](other.$d())}else if ($scope.get('Numeric')['$===']($case)) {return self.$d()}else {try {
        $b = other.$coerce(self), $a = Opal.to_ary($b), l = ($a[0] == null ? nil : $a[0]), r = ($a[1] == null ? nil : $a[1]), $b;
          return l['$<=>'](r);
        } catch ($err) {if (Opal.rescue($err, [$scope.get('NoMethodError')])) {
          try {
            nil
          } finally {
            Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
          }
          }else { throw $err; }
        }};
        return nil;
      });

      Opal.defn(self, '$coerce', TMP_1 = function(other) {
        var self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $case = nil, $zuper = nil, $zuper_index = nil;

        TMP_1.$$p = null;
        $zuper = [];
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        return (function() {$case = other;if ($scope.get('Numeric')['$===']($case)) {return [self.$d()['$-@'](), self.$d()]}else {return Opal.find_super_dispatcher(self, 'coerce', TMP_1, $iter).apply(self, $zuper)}})();
      });

      return (Opal.defn(self, '$to_f', function() {
        var $a, self = this;

        if (self.d['$=='](0)) {
          return 0};
        if ((($a = $rb_gt(self.d, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return (($scope.get('Float')).$$scope.get('INFINITY'))
          } else {
          return (($scope.get('Float')).$$scope.get('INFINITY'))['$-@']()
        };
      }), nil) && 'to_f';
    })($scope.base, $scope.get('Numeric'));

    Opal.cdecl($scope, 'JULIAN', $scope.get('Infinity').$new());

    Opal.cdecl($scope, 'GREGORIAN', $scope.get('Infinity').$new()['$-@']());

    Opal.cdecl($scope, 'ITALY', 2299161);

    Opal.cdecl($scope, 'ENGLAND', 2361222);

    Opal.cdecl($scope, 'MONTHNAMES', $rb_plus([nil], ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]));

    Opal.cdecl($scope, 'DAYNAMES', ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);

    Opal.cdecl($scope, 'ABBR_DAYNAMES', ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      Opal.alias(self, 'civil', 'new');
      Opal.defn(self, '$wrap', function(native$) {
        var self = this, instance = nil;

        instance = self.$allocate();
        instance.date = native$;
        return instance;
      });
      Opal.defn(self, '$parse', function(string) {
        var self = this, match = nil;

        match = /^(\d*)-(\d*)-(\d*)/.exec(string);
        return self.$wrap(new Date(parseInt(match[1], 10), parseInt(match[2], 10) - 1, parseInt(match[3], 10)));
      });
      return (Opal.defn(self, '$today', function() {
        var self = this;

        return self.$wrap(new Date());
      }), nil) && 'today';
    })(Opal.get_singleton_class(self));

    Opal.defn(self, '$initialize', function(year, month, day, start) {
      var self = this;

      if (year == null) {
        year = -4712
      }
      if (month == null) {
        month = 1
      }
      if (day == null) {
        day = 1
      }
      if (start == null) {
        start = $scope.get('ITALY')
      }
      return self.date = new Date(year, month - 1, day);
    });

    Opal.defn(self, '$-', function(date) {
      var self = this;

      
      if (date.$$is_number) {
        var result = self.$clone();
        result.date.setDate(self.date.getDate() - date);
        return result;
      }
      else if (date.date) {
        return Math.round((self.date - date.date) / (1000 * 60 * 60 * 24));
      }
      else {
        self.$raise($scope.get('TypeError'));
      }
    ;
    });

    Opal.defn(self, '$+', function(date) {
      var self = this;

      
      if (date.$$is_number) {
        var result = self.$clone();
        result.date.setDate(self.date.getDate() + date);
        return result;
      }
      else {
        self.$raise($scope.get('TypeError'));
      }
    ;
    });

    Opal.defn(self, '$<', function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a < b;
    ;
    });

    Opal.defn(self, '$<=', function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a <= b;
    ;
    });

    Opal.defn(self, '$>', function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a > b;
    ;
    });

    Opal.defn(self, '$>=', function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a >= b;
    ;
    });

    Opal.defn(self, '$<=>', function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);

      if (a < b) {
        return -1;
      }
      else if (a > b) {
        return 1;
      }
      else {
        return 0;
      }
    ;
    });

    Opal.defn(self, '$==', function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      return (a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth() && a.getDate() === b.getDate());
    ;
    });

    Opal.defn(self, '$>>', function(n) {
      var self = this;

      
      if (!n.$$is_number) {
        self.$raise($scope.get('TypeError'));
      }

      var result = self.$clone(), date = result.date, cur = date.getDate();
      date.setDate(1);
      date.setMonth(date.getMonth() + n);
      date.setDate(Math.min(cur, days_in_month(date.getFullYear(), date.getMonth())));
      return result;
    ;
    });

    Opal.defn(self, '$<<', function(n) {
      var self = this;

      
      if (!n.$$is_number) {
        self.$raise($scope.get('TypeError'));
      }

      return self['$>>'](-n);
    ;
    });

    Opal.alias(self, 'eql?', '==');

    Opal.defn(self, '$clone', function() {
      var self = this;

      return $scope.get('Date').$wrap(new Date(self.date.getTime()));
    });

    Opal.defn(self, '$day', function() {
      var self = this;

      return self.date.getDate();
    });

    Opal.defn(self, '$friday?', function() {
      var self = this;

      return self.$wday()['$=='](5);
    });

    Opal.defn(self, '$jd', function() {
      var self = this;

      
    //Adapted from http://www.physics.sfasu.edu/astro/javascript/julianday.html

    var mm = self.date.getMonth() + 1,
        dd = self.date.getDate(),
        yy = self.date.getFullYear(),
        hr = 12, mn = 0, sc = 0,
        ggg, s, a, j1, jd;

    hr = hr + (mn / 60) + (sc/3600);

    ggg = 1;
    if (yy <= 1585) {
      ggg = 0;
    }

    jd = -1 * Math.floor(7 * (Math.floor((mm + 9) / 12) + yy) / 4);

    s = 1;
    if ((mm - 9) < 0) {
      s =- 1;
    }

    a = Math.abs(mm - 9);
    j1 = Math.floor(yy + s * Math.floor(a / 7));
    j1 = -1 * Math.floor((Math.floor(j1 / 100) + 1) * 3 / 4);

    jd = jd + Math.floor(275 * mm / 9) + dd + (ggg * j1);
    jd = jd + 1721027 + 2 * ggg + 367 * yy - 0.5;
    jd = jd + (hr / 24);

    return jd;
    ;
    });

    Opal.defn(self, '$julian?', function() {
      var self = this;

      return self.date < new Date(1582, 10 - 1, 15, 12);
    });

    Opal.defn(self, '$monday?', function() {
      var self = this;

      return self.$wday()['$=='](1);
    });

    Opal.defn(self, '$month', function() {
      var self = this;

      return self.date.getMonth() + 1;
    });

    Opal.defn(self, '$next', function() {
      var self = this;

      return $rb_plus(self, 1);
    });

    Opal.defn(self, '$next_day', function(n) {
      var self = this;

      if (n == null) {
        n = 1
      }
      return $rb_plus(self, n);
    });

    Opal.defn(self, '$next_month', function() {
      var self = this;

      
      var result = self.$clone(), date = result.date, cur = date.getDate();
      date.setDate(1);
      date.setMonth(date.getMonth() + 1);
      date.setDate(Math.min(cur, days_in_month(date.getFullYear(), date.getMonth())));
      return result;
    ;
    });

    Opal.defn(self, '$prev_day', function(n) {
      var self = this;

      if (n == null) {
        n = 1
      }
      return $rb_minus(self, n);
    });

    Opal.defn(self, '$prev_month', function() {
      var self = this;

      
      var result = self.$clone(), date = result.date, cur = date.getDate();
      date.setDate(1);
      date.setMonth(date.getMonth() - 1);
      date.setDate(Math.min(cur, days_in_month(date.getFullYear(), date.getMonth())));
      return result;
    ;
    });

    Opal.defn(self, '$saturday?', function() {
      var self = this;

      return self.$wday()['$=='](6);
    });

    Opal.defn(self, '$strftime', function(format) {
      var self = this;

      if (format == null) {
        format = ""
      }
      
      if (format == '') {
        return self.$to_s();
      }

      return self.date.$strftime(format);
    ;
    });

    self.$alias_method("succ", "next");

    Opal.defn(self, '$sunday?', function() {
      var self = this;

      return self.$wday()['$=='](0);
    });

    Opal.defn(self, '$thursday?', function() {
      var self = this;

      return self.$wday()['$=='](4);
    });

    Opal.defn(self, '$to_s', function() {
      var self = this;

      
      var d = self.date, year = d.getFullYear(), month = d.getMonth() + 1, day = d.getDate();
      if (month < 10) { month = '0' + month; }
      if (day < 10) { day = '0' + day; }
      return year + '-' + month + '-' + day;
    ;
    });

    Opal.defn(self, '$tuesday?', function() {
      var self = this;

      return self.$wday()['$=='](2);
    });

    Opal.defn(self, '$wday', function() {
      var self = this;

      return self.date.getDay();
    });

    Opal.defn(self, '$wednesday?', function() {
      var self = this;

      return self.$wday()['$=='](3);
    });

    Opal.defn(self, '$year', function() {
      var self = this;

      return self.date.getFullYear();
    });

    
    function days_in_month(year, month) {
      var leap = ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0);
      return [31, (leap ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month]
    }
  
  })($scope.base, null)
};
