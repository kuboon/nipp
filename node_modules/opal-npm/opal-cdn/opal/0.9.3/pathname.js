/* Generated by Opal 0.9.3 */
Opal.modules["pathname"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$==', '$raise', '$attr_reader', '$path', '$start_with?', '$!', '$absolute?', '$sub', '$new']);
  (function($base, $super) {
    function $Pathname(){};
    var self = $Pathname = $klass($base, $super, 'Pathname', $Pathname);

    var def = self.$$proto, $scope = self.$$scope;

    def.path = nil;
    Opal.defn(self, '$initialize', function(path) {
      var self = this;

      if (path['$==']("\x00")) {
        self.$raise($scope.get('ArgumentError'))};
      return self.path = path;
    });

    self.$attr_reader("path");

    Opal.defn(self, '$==', function(other) {
      var self = this;

      return other.$path()['$=='](self.path);
    });

    Opal.defn(self, '$absolute?', function() {
      var self = this;

      return self.path['$start_with?']("/");
    });

    Opal.defn(self, '$relative?', function() {
      var self = this;

      return self['$absolute?']()['$!']();
    });

    Opal.defn(self, '$root?', function() {
      var self = this;

      return self.path['$==']("/");
    });

    Opal.defn(self, '$parent', function() {
      var $a, self = this, new_path = nil;

      new_path = self.path.$sub(/\/([^\/]+\/?$)/, "");
      if (new_path['$==']("")) {
        new_path = (function() {if ((($a = self['$absolute?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "/"
          } else {
          return "."
        }; return nil; })()};
      return $scope.get('Pathname').$new(new_path);
    });

    Opal.defn(self, '$sub', function() {
      var $a, self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      return $scope.get('Pathname').$new(($a = self.path).$sub.apply($a, Opal.to_a(args)));
    });

    Opal.defn(self, '$cleanpath', function() {
      var self = this;

      return Opal.normalize_loadable_path(self.path);
    });

    Opal.defn(self, '$to_path', function() {
      var self = this;

      return self.path;
    });

    Opal.defn(self, '$hash', function() {
      var self = this;

      return self.path;
    });

    Opal.alias(self, 'to_str', 'to_path');

    return Opal.alias(self, 'to_s', 'to_path');
  })($scope.base, null);
  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$Pathname', function(path) {
      var self = this;

      return $scope.get('Pathname').$new(path);
    })
  })($scope.base);
};
